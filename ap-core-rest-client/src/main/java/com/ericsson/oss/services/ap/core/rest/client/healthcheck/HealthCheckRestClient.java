/*------------------------------------------------------------------------------
 *******************************************************************************
 * COPYRIGHT Ericsson 2020
 *
 * The copyright to the computer program(s) herein is the property of
 * Ericsson Inc. The programs may be used and/or copied only with written
 * permission from Ericsson Inc. or in accordance with the terms and
 * conditions stipulated in the agreement/contract under which the
 * program(s) have been supplied.
 *******************************************************************************
 *----------------------------------------------------------------------------*/
package com.ericsson.oss.services.ap.core.rest.client.healthcheck;

import java.util.Set;

import javax.inject.Inject;

import org.apache.commons.collections.CollectionUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.ericsson.oss.itpf.sdk.core.retry.RetriableCommandException;
import com.ericsson.oss.services.ap.api.exception.HealthCheckProfileNotFoundException;
import com.ericsson.oss.services.ap.api.exception.HealthCheckRestServiceException;
import com.ericsson.oss.services.ap.common.util.string.FDN;
import com.ericsson.oss.services.ap.core.rest.client.RestUrls;
import com.ericsson.oss.services.ap.core.rest.client.healthcheck.model.ProfileDetails;
import com.ericsson.oss.services.ap.core.rest.client.healthcheck.model.Report;

/**
 * This REST client is responsible for executing REST Calls towards Node Health Check.
 */
public class HealthCheckRestClient {

    public HealthCheckRestClient() {
        //No-arg constructor required by application server
    }

    @Inject
    private HealthCheckRestExecutor executor;

    @Inject
    private HealthCheckMoHelper healthCheckMoHelper;

    private Logger logger = LoggerFactory.getLogger(getClass());

    /**
     * Creates a health check report
     *
     * @param apNodeFdn
     *            the FDN of the AP node
     * @return the name of the generated report
     */
    public String createReport(final String apNodeFdn) {
        final String profileName = healthCheckMoHelper.getHealthCheckProfileName(apNodeFdn);
        final String nodeName = FDN.get(apNodeFdn).getRdnValue();
        try {
            return executor.getReportName(nodeName, profileName);
        } catch (final RetriableCommandException retriableCommandException) {
            final String cause = retriableCommandException.getCause().getMessage();
            logger.error(String.format("Error creating report for node %s as %s", apNodeFdn, cause));
            throw new HealthCheckRestServiceException(cause);
        } catch (final Exception exception) {
            logger.error(String.format("Error creating report for node %s as %s", apNodeFdn, exception.getMessage()));
            throw new HealthCheckRestServiceException(exception.getMessage());
        }
    }

    /**
     * View progress of a specified Health Check Report
     *
     * @param apNodeFdn
     *            the FDN of the AP Node
     * @param reportName
     *            the name of the report to retrieve the status of
     * @return the {@link Report} generated by NHC
     */
    public Report viewReport(final String apNodeFdn, final String reportName, final String healthCheckPhase) {
        try {
            final String reportId = executor.getMainReportId(RestUrls.NHC_SERVICE.getFullUrl(), reportName);
            logger.info("Successfully retrieved mainReport Id {} for node {}", reportId, apNodeFdn);
            healthCheckMoHelper.updateReportIdOnHealthCheckMO(reportId, apNodeFdn, healthCheckPhase);
            final String viewByldUrl = RestUrls.NHC_SERVICE.getFullUrl() + reportId.toString();
            return executor.getMainReport(viewByldUrl);
        } catch (final Exception exception) {
            logger.error(String.format("Error viewing report %s", reportName), exception);
            throw exception;
        }
    }

    /**
     * Delete progress for deleting one or multiple Health Check Reports. No action taken if Set has no values.
     *
     * @param reportIds
     *            A {@link Set} of reportIds {@link String} to be deleted.
     */
    public void deleteReport(final Set<String> reportIds) {
        if (CollectionUtils.isNotEmpty(reportIds)) {
            final String deleteReportIds = String.join(",", reportIds);
            final String deleteReportUrl = RestUrls.NHC_SERVICE.getFullUrl() + deleteReportIds;
            try {
                executor.deleteGeneratedReports(deleteReportUrl);
            } catch (final Exception ex) {
                logger.error(String.format("Error deleting NHC report(s): %s ", deleteReportIds), ex);
            }
        }
    }

    /**
     * Get details of a profile from NHC.
     *
     * @param profileName
     *            Name of the profile.
     * @return the profile details {@link ProfileDetails}
     * @throws HealthCheckProfileNotFoundException
     * @throws HealthCheckRestServiceException
     */
    public ProfileDetails getProfileDetails(final String profileName) {
        logger.info("Getting details of health check profile: {}", profileName);
        try {
            return executor.getProfileDetails(profileName);
        } catch (final RetriableCommandException retriableCommandException) {
            logger.error(String.format("Error getting details of health check profile %s", profileName), retriableCommandException);
            final Throwable retriableCommandExceptionCause = retriableCommandException.getCause();
            final String retriableCommandExceptionCauseMessage = retriableCommandExceptionCause.getMessage();
            if (retriableCommandExceptionCause instanceof HealthCheckProfileNotFoundException) {
                throw new HealthCheckProfileNotFoundException(retriableCommandExceptionCauseMessage);
            }
            throw new HealthCheckRestServiceException(retriableCommandExceptionCauseMessage);
        }
    }
}
